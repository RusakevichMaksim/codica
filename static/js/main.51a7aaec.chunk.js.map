{"version":3,"sources":["api/openweather.ts","key/key.ts","redux/weatherReducer.tsx","component/general/card/card.tsx","component/general/GeneralPage.tsx","component/detail/detail.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","localstorage/localStorage.tsx","index.tsx"],"names":["weatherOpen","axios","create","baseURL","weatherAPI","cityName","get","then","response","data","SET_WEATHER_DATA","SET_CITY_NAME","SET_CITY_DATA","UPDATE_CITY_DATA","DELETE_CITY","initialState","id","citySelected","cityNameList","cityGroup","lat","lon","name","temp","feels_like","humidity","temp_max","temp_min","doubleNameReject","city","array","i","length","console","log","toLowerCase","setCityNameAC","type","getWeatherThunkCreator","dispatch","getState","a","newItem","coord","main","error","weatherReducer","state","action","toLocaleLowerCase","index","indexOf","Object","assign","slice","concat","indexEl","useStyles","makeStyles","root","minWidth","padding","margin","backgroundColor","color","bullet","display","transform","title","fontSize","pos","marginBottom","buttonUpdate","buttonDelete","card","height","flexDirection","cardContent","flexGrow","Cards","update","deleted","classes","useEffect","history","useHistory","Card","className","onClick","e","push","CardContent","Typography","gutterBottom","variant","component","Button","stopPropagation","size","mapDispatchToProps","updateWeatherThunkCreator","deleteCityAC","theme","icon","marginRight","spacing","heroContent","palette","background","paper","heroButtons","marginTop","cardGrid","paddingTop","paddingBottom","inputGrid","cardMedia","buttonSetCIty","marginLeft","input","border","borderRadius","connect","Container","maxWidth","Grid","container","map","item","xs","sm","md","Input","style","borderRight","value","onChange","target","placeholder","compose","withRouter","props","match","params","CityName","currentData","event","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","subscribe","stringify","setItem","saveState","ReactDOM","render","document","getElementById"],"mappings":"uOAEMA,E,OAAcC,EAAMC,OAAO,CAC/BC,QAAQ,6CAGJC,EAAa,SACTC,GACN,OAAOL,EACJM,IADI,oBACaD,EADb,kBCRW,mCDQX,kBAEJE,MAAK,SAACC,GAAD,OAAcA,EAASC,SEP7BC,EAAgB,oBAChBC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAmB,mBACnBC,EAAc,cAsBhBC,EAA6B,CAC/BC,GAAI,KACJC,aAAc,GACdC,aAAc,CAAC,QACfC,UAAW,CACT,CACEH,GAAI,OACJI,IAAK,QACLC,IAAK,QACLC,KAAM,OACNC,KAAM,MACNC,WAAY,GACZC,SAAU,GACVC,SAAU,GACVC,SAAU,MAKVC,EAAmB,SAACC,EAAcC,GACtC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAEhC,GADAE,QAAQC,IAAIJ,EAAMC,GAAGI,cAAeN,EAAKM,eACrCL,EAAMC,GAAGI,gBAAkBN,EAAKM,cAClC,OAAO,EAGX,OAAO,GAiEIC,EAAgB,SAACd,GAAD,MAAoC,CAC/De,KAAM1B,EACNF,KAAMa,IAsCKgB,EAAyB,SACpChB,GAEA,8CAAO,WAAOiB,EAAUC,GAAjB,eAAAC,EAAA,+EAEcrC,EAAmBkB,GAFjC,OAECb,EAFD,OAGH8B,GApCwBG,EAqCR,CACZ1B,GAAIP,EAAKO,GACTK,IAAKZ,EAAKkC,MAAMtB,IAChBD,IAAKX,EAAKkC,MAAMvB,IAChBE,KAAMb,EAAKa,KACXC,KAAMd,EAAKmC,KAAKrB,KAChBC,WAAYf,EAAKmC,KAAKpB,WACtBC,SAAUhB,EAAKmC,KAAKnB,SACpBC,SAAUjB,EAAKmC,KAAKlB,SACpBC,SAAUlB,EAAKmC,KAAKjB,UA9CwC,CACpEU,KAAMzB,EACN8B,QAASA,KA+BF,gDAiBHT,QAAQY,MAAR,QAjBG,kCAjCoB,IAACH,IAiCrB,oBAAP,yDA+CaI,EAxJQ,WAGH,IAFlBC,EAEiB,uDAFThC,EACRiC,EACiB,uCACjB,OAAQA,EAAOX,MACb,KAAK3B,EACH,OAAO,2BAAKqC,GAAZ,IAAmB/B,GAAIgC,EAAOvC,OAChC,KAAKE,EACH,OAAO,2BAAKoC,GAAZ,IAAmB9B,aAAc+B,EAAOvC,OAC1C,KAAKG,EAEH,OAAIgB,EAAiBmB,EAAM9B,aAAc8B,EAAM7B,cACtC6B,EAEF,2BACFA,GADL,IAEE7B,aAAa,GAAD,mBACP6B,EAAM7B,cADC,CAEV8B,EAAON,QAAQpB,KAAK2B,sBAEtB9B,UAAU,GAAD,mBAAM4B,EAAM5B,WAAZ,CAAuB6B,EAAON,YAE3C,KAAK7B,EACH,IAAIqC,EAAQH,EAAM7B,aAAaiC,QAAQH,EAAON,QAAQpB,KAAKa,eAC3D,OAAOiB,OAAOC,OAAO,GAAIN,EAAO,CAC9B5B,UAAW4B,EAAM5B,UACdmC,MAAM,EAAGJ,GACTK,OAAO,CAACP,EAAON,UACfa,OAAOR,EAAM5B,UAAUmC,MAAMJ,EAAQ,MAE5C,KAAKpC,EACH,IAAI0C,EAAUT,EAAM7B,aAAaiC,QAAQH,EAAO1B,KAAKa,eAErD,OADAF,QAAQC,IAAIa,EAAM7B,aAAaiC,QAAQH,EAAO1B,OACvC,2BACFyB,GADL,IAEE5B,UAAU,GAAD,mBACJ4B,EAAM5B,UAAUmC,MAAM,EAAGE,IADrB,YAEJT,EAAM5B,UAAUmC,MAAME,EAAU,KAErCtC,aAAa,GAAD,mBACP6B,EAAM7B,aAAaoC,MAAM,EAAGE,IADrB,YAEPT,EAAM7B,aAAaoC,MAAME,EAAU,OAG5C,QACE,OAAOT,I,oDCzFPU,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,IACVC,QAAS,OACTC,OAAQ,OACRC,gBAAiB,UACjBC,MAAO,SAETC,OAAQ,CACNC,QAAS,eACTJ,OAAQ,QACRK,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,IAEhBC,aAAc,CACZT,gBAAiB,UAEnBU,aAAc,CACZV,gBAAiB,OAEnBW,KAAM,CACJC,OAAQ,OACRT,QAAS,OACTU,cAAe,UAEjBC,YAAa,CACXC,SAAU,KAoDCC,EAhDgB,SAAC,GAAqC,IAAnCzD,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMyD,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC9CC,EAAUzB,IAChB0B,qBAAU,eAIV,IAAIC,EAAUC,cACd,OACE,cAACC,EAAA,EAAD,CACEC,UAAWL,EAAQR,KACnBc,QAAS,SAACC,GACRL,EAAQM,KAAR,gBAAsBpE,KAH1B,SAME,eAACqE,EAAA,EAAD,CAAaJ,UAAWL,EAAQL,YAAhC,UACE,eAACe,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,KAAhD,wBACa,uBAAMR,UAAU,WAAhB,cAA6BjE,QAE1C,eAACsE,EAAA,EAAD,iCACqB,uBAAML,UAAU,WAAhB,cAA6BhE,QAElD,sBAAKgE,UAAU,kBAAf,UACE,cAACS,EAAA,EAAD,CACET,UAAWL,EAAQV,aACnBgB,QAAS,SAACC,GACRA,EAAEQ,kBACFjB,EAAO1D,IAET4E,KAAK,QANP,oBAUA,cAACF,EAAA,EAAD,CACET,UAAWL,EAAQT,aACnBe,QAAS,SAACC,GACRA,EAAEQ,kBACFhB,EAAQ3D,IAEV4E,KAAK,QANP,6B,2BC5DJC,EAAqB,CACzB7D,yBACA8D,0BFkKuC,SACvC9E,GAEA,8CAAO,WAAOiB,EAAUC,GAAjB,eAAAC,EAAA,+EAEcrC,EAAmBkB,GAFjC,OAECb,EAFD,OAGH8B,GApD2BG,EAqDR,CACf1B,GAAIP,EAAKO,GACTK,IAAKZ,EAAKkC,MAAMtB,IAChBD,IAAKX,EAAKkC,MAAMvB,IAChBE,KAAMb,EAAKa,KACXC,KAAMd,EAAKmC,KAAKrB,KAChBC,WAAYf,EAAKmC,KAAKpB,WACtBC,SAAUhB,EAAKmC,KAAKnB,SACpBC,SAAUjB,EAAKmC,KAAKlB,SACpBC,SAAUlB,EAAKmC,KAAKjB,UA9D8C,CAC1EU,KAAMxB,EACN6B,QAASA,KA+CF,gDAiBHT,QAAQY,MAAR,QAjBG,kCAjDuB,IAACH,IAiDxB,oBAAP,yDEpKAN,gBACAiE,aF2H0B,SAAC/E,GAAD,MAAmC,CAC7De,KAAMvB,EACNQ,KAAMA,KEvGFmC,EAAYC,aAAW,SAAC4C,GAAD,MAAY,CACvCC,KAAM,CACJC,YAAaF,EAAMG,QAAQ,IAE7BC,YAAa,CACX3C,gBAAiBuC,EAAMK,QAAQC,WAAWC,MAC1ChD,QAASyC,EAAMG,QAAQ,EAAG,EAAG,IAE/BK,YAAa,CACXC,UAAWT,EAAMG,QAAQ,IAE3BO,SAAU,CACRC,WAAYX,EAAMG,QAAQ,GAC1BS,cAAeZ,EAAMG,QAAQ,IAE/BU,UAAW,CACTF,WAAYX,EAAMG,QAAQ,GAC1BS,cAAeZ,EAAMG,QAAQ,IAG/BW,UAAW,CACTH,WAAY,UAEdpC,YAAa,CACXC,SAAU,GAEZuC,cAAe,CACbtD,gBAAiB,QACjBC,MAAO,QACPsD,WAAY,QAEdC,MAAO,CACLxD,gBAAiB,QACjByC,YAAa,OACbgB,OAAQ,oBACRC,aAAc,WAyGHC,eAhKS,SAAC3E,GACvB,MAAO,CACL/B,GAAI+B,EAAMD,eAAe9B,GACzBM,KAAMyB,EAAMD,eAAe7B,aAC3BE,UAAW4B,EAAMD,eAAe3B,aA4JIgF,EAAzBuB,EArG0B,SAAC,GAOnC,IANLpG,EAMI,EANJA,KACAH,EAKI,EALJA,UACAmB,EAII,EAJJA,uBACA8D,EAGI,EAHJA,0BACAhE,EAEI,EAFJA,cACAiE,EACI,EADJA,aAKMnB,EAAUzB,IAChB,OACE,iCACE,cAACkE,EAAA,EAAD,CAAWpC,UAAWL,EAAQ8B,SAAUY,SAAS,KAAjD,SAEE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACrB,QAAS,EAAzB,SACGtF,EACCA,EAAU4G,KAAI,SAAClG,EAAgBqB,GAAjB,OACZ,cAAC2E,EAAA,EAAD,CAAMG,MAAI,EAAoBC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAjD,SACE,cAAC,EAAD,CAEE7G,KAAMO,EAAKP,KACXC,KAAMM,EAAKN,KACXyD,OAAQoB,EACRnB,QAASoB,GAJJ/E,EAAO4B,IAFA5B,EAAO4B,MAWzB,iCAIN,cAACyE,EAAA,EAAD,CAAWpC,UAAWL,EAAQiC,UAAWS,SAAS,KAAlD,SACE,gCACE,cAACQ,EAAA,EAAD,CAEEC,MAAO,CACLtE,gBAAiB,QACjBuE,YAAa,MACbtE,MAAO,SAETuE,MAAOjH,EACPkH,SAAU,SAAC/C,GAAD,OAAOrD,EAAcqD,EAAEgD,OAAOF,QACxCG,YAAY,kBAEd,cAAC1C,EAAA,EAAD,CACET,UAAWL,EAAQmC,cACnB7B,QAAS,WACPlD,EAAuBhB,IAEzB4E,KAAK,QALP,4B,QC1HJC,EAAqB,CACzB7D,yBACAF,iBAwEauG,cACbjB,aAvEsB,SAAC3E,GACvB,MAAO,CACL5B,UAAW4B,EAAMD,eAAe3B,aAqETgF,GACzByC,IAFaD,EAnDqB,SAACE,GACnC,IAAIxI,EAAWwI,EAAMC,MAAMC,OAAOC,SAC9BC,EAAwB,CAC1BjI,GAAI,EACJI,IAAK,EACLC,IAAK,EACLC,KAAM,GACNC,KAAM,EACNC,WAAY,EACZC,SAAU,EACVC,SAAU,EACVC,SAAU,GAUZ,OARAkH,EAAM1H,UAAU4G,KAAI,SAACmB,GACfA,EAAM5H,OAASjB,IACjB4I,EAAcC,MAGlB/D,qBAAU,WACRlD,QAAQC,IAAI2G,MAGZ,sBAAKtD,UAAU,mBAAf,UACE,gCACE,sBAAMA,UAAU,gBAAhB,wBACA,sBAAMA,UAAU,gBAAhB,SAAiClF,IAAiB,OAEpD,gCACE,sBAAMkF,UAAU,gBAAhB,kCAEA,sBAAMA,UAAU,gBAAhB,SAAiC0D,EAAY1H,UAE/C,gCACE,sBAAMgE,UAAU,gBAAhB,oCACA,sBAAMA,UAAU,gBAAhB,SAAiC0D,EAAYzH,gBAE/C,gCACE,sBAAM+D,UAAU,gBAAhB,sBACA,sBAAMA,UAAU,gBAAhB,SAAiC0D,EAAYxH,cAE/C,gCACE,sBAAM8D,UAAU,gBAAhB,uBACA,sBAAMA,UAAU,gBAAhB,SAAiC0D,EAAYvH,cAE/C,gCACE,sBAAM6D,UAAU,gBAAhB,uBACA,sBAAMA,UAAU,gBAAhB,SAAiC0D,EAAYtH,oBC7DtCwH,EAfH,WACV,OACE,8BACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,mBAAZ,SACE,cAAC,EAAD,YCEKC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjJ,MAAK,YAAkD,IAA/CkJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCJVO,EAAWC,YAAgB,CAC7BjH,eAAgBA,IAEZkH,ECEmB,WACvB,IACE,IAAMC,EAAkBC,aAAaC,QAAQ,SAC7C,GAAwB,OAApBF,EACF,OAEF,OAAOG,KAAKC,MAAMJ,GAClB,MAAOpH,GACP,QDVmByH,GAKjBC,EAAmBC,OAAOC,sCAAwC9B,IAClE+B,EAAQC,YACZb,EACAE,EACAO,EAAiBK,YAAgBC,OAGnCH,EAAMI,WAAU,YClBS,SAAC/H,GACxB,IACE,IAAMkH,EAAkBG,KAAKW,UAAUhI,GACvCmH,aAAac,QAAQ,QAASf,GAC9B,WDeFgB,CAAUP,EAAMlI,eAGlBgI,OAAOE,MAAQA,EACAA,QEbfQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAIJU,SAASC,eAAe,SAM1B/B,M","file":"static/js/main.51a7aaec.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { weatherAPIKey } from \"../key/key\";\r\nconst weatherOpen = axios.create({\r\n  baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n});\r\n\r\nconst weatherAPI = {\r\n  getCity(cityName: string) {\r\n    return weatherOpen\r\n      .get(`weather?q=${cityName}&appid=${weatherAPIKey}&units=metric`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\nexport { weatherAPI };\r\n","const weatherAPIKey = \"968cb1decfce0d451e6ef8dfe6e0713c\";\r\n\r\nexport { weatherAPIKey };\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { weatherAPI } from \"../api/openweather\";\r\nimport { AppStateType } from \"./store\";\r\nconst SET_WEATHER_DATA = ` SET-WEATHER-DATA`;\r\nconst SET_CITY_NAME = \"SET-CITY-NAME\";\r\nconst SET_CITY_DATA = \"SET-CITY-DATA\";\r\nconst UPDATE_CITY_DATA = \"UPDATE-CITY_DATA\";\r\nconst DELETE_CITY = \"DELETE_CITY\";\r\nexport type CityData = {\r\n  id: number;\r\n  lat: number;\r\n  lon: number;\r\n  name: string;\r\n  temp: number;\r\n  feels_like: number;\r\n  humidity: number;\r\n  temp_max: number;\r\n  temp_min: number;\r\n};\r\n\r\nexport type InitialState = {\r\n  id: number | null;\r\n  citySelected: string;\r\n  cityNameList: Array<string>;\r\n  cityGroup: Array<CityData>;\r\n};\r\n\r\nexport type CityGroupType = {};\r\n\r\nlet initialState: InitialState = {\r\n  id: null,\r\n  citySelected: \"\",\r\n  cityNameList: [\"kyiv\"],\r\n  cityGroup: [\r\n    {\r\n      id: 703448,\r\n      lat: 50.4333,\r\n      lon: 30.5167,\r\n      name: \"Kyiv\",\r\n      temp: 19.55,\r\n      feels_like: 19,\r\n      humidity: 60,\r\n      temp_max: 20,\r\n      temp_min: 15,\r\n    },\r\n  ],\r\n};\r\n\r\nconst doubleNameReject = (city: string, array: Array<string>) => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    console.log(array[i].toLowerCase(), city.toLowerCase());\r\n    if (array[i].toLowerCase() === city.toLowerCase()) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst weatherReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitialState => {\r\n  switch (action.type) {\r\n    case SET_WEATHER_DATA:\r\n      return { ...state, id: action.data };\r\n    case SET_CITY_NAME:\r\n      return { ...state, citySelected: action.data };\r\n    case SET_CITY_DATA:\r\n      // console.log(state);\r\n      if (doubleNameReject(state.citySelected, state.cityNameList)) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        cityNameList: [\r\n          ...state.cityNameList,\r\n          action.newItem.name.toLocaleLowerCase(),\r\n        ],\r\n        cityGroup: [...state.cityGroup, action.newItem],\r\n      };\r\n    case UPDATE_CITY_DATA:\r\n      let index = state.cityNameList.indexOf(action.newItem.name.toLowerCase());\r\n      return Object.assign({}, state, {\r\n        cityGroup: state.cityGroup\r\n          .slice(0, index)\r\n          .concat([action.newItem])\r\n          .concat(state.cityGroup.slice(index + 1)),\r\n      });\r\n    case DELETE_CITY:\r\n      let indexEl = state.cityNameList.indexOf(action.name.toLowerCase());\r\n      console.log(state.cityNameList.indexOf(action.name));\r\n      return {\r\n        ...state,\r\n        cityGroup: [\r\n          ...state.cityGroup.slice(0, indexEl),\r\n          ...state.cityGroup.slice(indexEl + 1),\r\n        ],\r\n        cityNameList: [\r\n          ...state.cityNameList.slice(0, indexEl),\r\n          ...state.cityNameList.slice(indexEl + 1),\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport type SetWeatherDataType = {\r\n  type: typeof SET_WEATHER_DATA;\r\n  data: number;\r\n};\r\nexport const setWeatherDataAC = (id: number): SetWeatherDataType => ({\r\n  type: SET_WEATHER_DATA,\r\n  data: id,\r\n});\r\n\r\nexport type setCityNameType = {\r\n  type: typeof SET_CITY_NAME;\r\n  data: string;\r\n};\r\n\r\nexport const setCityNameAC = (name: string): setCityNameType => ({\r\n  type: SET_CITY_NAME,\r\n  data: name,\r\n});\r\n\r\nexport type setCityDataType = {\r\n  type: typeof SET_CITY_DATA;\r\n  newItem: CityData;\r\n};\r\n\r\nexport const setCityDataAC = (newItem: CityData): setCityDataType => ({\r\n  type: SET_CITY_DATA,\r\n  newItem: newItem,\r\n});\r\n\r\nexport type updateCityDataType = {\r\n  type: typeof UPDATE_CITY_DATA;\r\n  newItem: CityData;\r\n};\r\nexport const updateCityDataAC = (newItem: CityData): updateCityDataType => ({\r\n  type: UPDATE_CITY_DATA,\r\n  newItem: newItem,\r\n});\r\n\r\nexport type deleteCityType = {\r\n  type: typeof DELETE_CITY;\r\n  name: string;\r\n};\r\nexport const deleteCityAC = (name: string): deleteCityType => ({\r\n  type: DELETE_CITY,\r\n  name: name,\r\n});\r\n\r\ntype ActionTypes =\r\n  | SetWeatherDataType\r\n  | setCityDataType\r\n  | setCityNameType\r\n  | updateCityDataType\r\n  | deleteCityType;\r\n\r\nexport const getWeatherThunkCreator = (\r\n  name: string\r\n): ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes> => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let data = await weatherAPI.getCity(name);\r\n      dispatch(\r\n        setCityDataAC({\r\n          id: data.id,\r\n          lon: data.coord.lon,\r\n          lat: data.coord.lat,\r\n          name: data.name,\r\n          temp: data.main.temp,\r\n          feels_like: data.main.feels_like,\r\n          humidity: data.main.humidity,\r\n          temp_max: data.main.temp_max,\r\n          temp_min: data.main.temp_min,\r\n        })\r\n      );\r\n    } catch {\r\n      console.error(`Oops`);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateWeatherThunkCreator = (\r\n  name: string\r\n): ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes> => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let data = await weatherAPI.getCity(name);\r\n      dispatch(\r\n        updateCityDataAC({\r\n          id: data.id,\r\n          lon: data.coord.lon,\r\n          lat: data.coord.lat,\r\n          name: data.name,\r\n          temp: data.main.temp,\r\n          feels_like: data.main.feels_like,\r\n          humidity: data.main.humidity,\r\n          temp_max: data.main.temp_max,\r\n          temp_min: data.main.temp_min,\r\n        })\r\n      );\r\n    } catch {\r\n      console.error(`Oops`);\r\n    }\r\n  };\r\n};\r\n\r\nexport default weatherReducer;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\ntype Props = {\r\n  name: string;\r\n  temp: number;\r\n  update: (name: string) => void;\r\n  deleted: (name: string) => void;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n    padding: \"20px\",\r\n    margin: \"50px\",\r\n    backgroundColor: \"#868282\",\r\n    color: \"white\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  buttonUpdate: {\r\n    backgroundColor: \"orange\",\r\n  },\r\n  buttonDelete: {\r\n    backgroundColor: \"red\",\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nconst Cards: React.FC<Props> = ({ name, temp, update, deleted }) => {\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    // console.log(cityGroup);\r\n    // getWeatherThunkCreator(\"moscow\");\r\n  });\r\n  let history = useHistory();\r\n  return (\r\n    <Card\r\n      className={classes.card}\r\n      onClick={(e) => {\r\n        history.push(`/city/${name}`);\r\n      }}\r\n    >\r\n      <CardContent className={classes.cardContent}>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          City name: <span className=\"cardData\"> {name}</span>\r\n        </Typography>\r\n        <Typography>\r\n          Temperature value: <span className=\"cardData\"> {temp}</span>\r\n        </Typography>\r\n        <div className=\"button__wrapper\">\r\n          <Button\r\n            className={classes.buttonUpdate}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              update(name);\r\n            }}\r\n            size=\"small\"\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            className={classes.buttonDelete}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              deleted(name);\r\n            }}\r\n            size=\"small\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/store\";\r\nimport {\r\n  getWeatherThunkCreator,\r\n  updateWeatherThunkCreator,\r\n  setCityNameAC,\r\n  CityData,\r\n  deleteCityAC,\r\n} from \"../../redux/weatherReducer\";\r\n\r\nimport Cards from \"./card/card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Input } from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst mapDispatchToProps = {\r\n  getWeatherThunkCreator,\r\n  updateWeatherThunkCreator,\r\n  setCityNameAC,\r\n  deleteCityAC,\r\n};\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    id: state.weatherReducer.id,\r\n    name: state.weatherReducer.citySelected,\r\n    cityGroup: state.weatherReducer.cityGroup,\r\n  };\r\n};\r\ntype MapStateToProps = {\r\n  name: string;\r\n  cityGroup: any;\r\n};\r\ntype DispatchStateToProps = {\r\n  getWeatherThunkCreator: (name: string) => void;\r\n  updateWeatherThunkCreator: (name: string) => void;\r\n  setCityNameAC: (name: string) => void;\r\n  deleteCityAC: (name: string) => void;\r\n};\r\n\r\ntype PropsType = MapStateToProps & DispatchStateToProps;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  heroContent: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(8, 0, 6),\r\n  },\r\n  heroButtons: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  inputGrid: {\r\n    paddingTop: theme.spacing(0),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n\r\n  cardMedia: {\r\n    paddingTop: \"56.25%\", // 16:9\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n  buttonSetCIty: {\r\n    backgroundColor: \"green\",\r\n    color: \"white\",\r\n    marginLeft: \"10px\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    marginRight: \"20px\",\r\n    border: \"1px solid #7d7b7b\",\r\n    borderRadius: \"3px\",\r\n  },\r\n}));\r\n\r\nconst GeneralPage: React.FC<PropsType> = ({\r\n  name,\r\n  cityGroup,\r\n  getWeatherThunkCreator,\r\n  updateWeatherThunkCreator,\r\n  setCityNameAC,\r\n  deleteCityAC,\r\n}) => {\r\n  // useEffect(() => {\r\n  //   updateWeatherThunkCreator(\"Kyiv\");\r\n  // }, []);\r\n  const classes = useStyles();\r\n  return (\r\n    <main>\r\n      <Container className={classes.cardGrid} maxWidth=\"md\">\r\n        {/* End hero unit */}\r\n        <Grid container spacing={4}>\r\n          {cityGroup ? (\r\n            cityGroup.map((city: CityData, index: number) => (\r\n              <Grid item key={name + index} xs={12} sm={6} md={4}>\r\n                <Cards\r\n                  key={name + index}\r\n                  name={city.name}\r\n                  temp={city.temp}\r\n                  update={updateWeatherThunkCreator}\r\n                  deleted={deleteCityAC}\r\n                />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Grid>\r\n      </Container>\r\n      <Container className={classes.inputGrid} maxWidth=\"md\">\r\n        <div>\r\n          <Input\r\n            // className={classes.input}\r\n            style={{\r\n              backgroundColor: \"white\",\r\n              borderRight: \"3px\",\r\n              color: \"black\",\r\n            }}\r\n            value={name}\r\n            onChange={(e) => setCityNameAC(e.target.value)}\r\n            placeholder=\"set city name\"\r\n          />\r\n          <Button\r\n            className={classes.buttonSetCIty}\r\n            onClick={() => {\r\n              getWeatherThunkCreator(name);\r\n            }}\r\n            size=\"small\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </div>\r\n      </Container>\r\n    </main>\r\n  );\r\n\r\n  // return (\r\n  //   <div>\r\n  //     {cityGroup ? (\r\n  //       <div className=\"card__wrapper\">\r\n  //         {cityGroup.map((city: CityData, index: number) => {\r\n  //           return (\r\n  //             <Cards\r\n  //               key={name + index}\r\n  //               name={city.name}\r\n  //               temp={city.temp}\r\n  //               update={updateWeatherThunkCreator}\r\n  //               deleted={deleteCityAC}\r\n  //             />\r\n  //           );\r\n  //         })}\r\n  //       </div>\r\n  //     ) : (\r\n  //       <></>\r\n  //     )}\r\n\r\n  // <div className=\"input__wrapper\">\r\n  //   <Input\r\n  //     // className={classes.input}\r\n  //     value={name}\r\n  //     onChange={(e) => setCityNameAC(e.target.value)}\r\n  //     placeholder=\"set city name\"\r\n  //   />\r\n  //   <Button\r\n  //     // className={classes.buttonSetCIty}\r\n  //     onClick={() => {\r\n  //       getWeatherThunkCreator(name);\r\n  //     }}\r\n  //     size=\"small\"\r\n  //   >\r\n  //     Update\r\n  //   </Button>\r\n  // </div>\r\n  //   </div>\r\n  // );\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralPage);\r\n","import { ComponentType, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"../../redux/store\";\r\nimport {\r\n  CityData,\r\n  getWeatherThunkCreator,\r\n  setCityNameAC,\r\n} from \"../../redux/weatherReducer\";\r\n\r\nconst mapDispatchToProps = {\r\n  getWeatherThunkCreator,\r\n  setCityNameAC,\r\n};\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    cityGroup: state.weatherReducer.cityGroup,\r\n  };\r\n};\r\ntype MapStateToProps = {\r\n  name: string;\r\n  cityGroup: any;\r\n};\r\ntype DispatchStateToProps = {\r\n  getWeatherThunkCreator: (name: string) => void;\r\n  setCityNameAC: (name: string) => void;\r\n};\r\ntype TParams = { CityName: string };\r\n\r\ntype PropsType = MapStateToProps &\r\n  DispatchStateToProps &\r\n  RouteComponentProps<TParams>;\r\n\r\nconst Detail: React.FC<PropsType> = (props) => {\r\n  let cityName = props.match.params.CityName;\r\n  let currentData: CityData = {\r\n    id: 0,\r\n    lat: 0,\r\n    lon: 0,\r\n    name: \"\",\r\n    temp: 0,\r\n    feels_like: 0,\r\n    humidity: 0,\r\n    temp_max: 0,\r\n    temp_min: 0,\r\n  };\r\n  props.cityGroup.map((event: any) => {\r\n    if (event.name === cityName) {\r\n      currentData = event;\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    console.log(props);\r\n  });\r\n  return (\r\n    <div className=\"details__wrapper\">\r\n      <div>\r\n        <span className=\"details__name\"> City Name</span>\r\n        <span className=\"details__data\">{cityName}</span>{\" \"}\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\"> Current temperature</span>\r\n\r\n        <span className=\"details__data\">{currentData.temp}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\">Feels like temperature</span>\r\n        <span className=\"details__data\">{currentData.feels_like}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\">humidity</span>\r\n        <span className=\"details__data\">{currentData.humidity}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\"> temp_max</span>\r\n        <span className=\"details__data\">{currentData.temp_max}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\"> temp_min</span>\r\n        <span className=\"details__data\">{currentData.temp_min}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withRouter\r\n)(Detail);\r\n","import { Route, Switch } from \"react-router-dom\";\r\nimport GeneralPage from \"./component/general/GeneralPage\";\r\nimport Detail from \"./component/detail/detail\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/test\">\r\n          <GeneralPage />\r\n        </Route>\r\n        <Route path=\"/City/:CityName?\">\r\n          <Detail />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport weatherReducer from \"./weatherReducer\";\r\n\r\nimport { saveState, loadState } from \"../localstorage/localStorage\";\r\nlet reducers = combineReducers({\r\n  weatherReducer: weatherReducer,\r\n});\r\nconst persistedState = loadState();\r\n\r\ntype ReducersType = typeof reducers;\r\nexport type AppStateType = ReturnType<ReducersType>;\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n","import { AppStateType } from \"../redux/store\";\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch {\r\n    // We'll just ignore write errors\r\n  }\r\n};\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\n\r\nimport store from \"./redux/store\";\r\n\r\n// console.log(store.getState());\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
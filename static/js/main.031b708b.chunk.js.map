{"version":3,"sources":["api/openweather.ts","key/key.ts","redux/weatherReducerVariable.tsx","redux/weatherReducer.tsx","component/general/card/card.tsx","component/general/GeneralPage.tsx","component/detail/detail.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","localstorage/localStorage.tsx","index.tsx"],"names":["weatherOpen","axios","create","baseURL","weatherAPI","cityName","get","then","response","data","SET_WEATHER_DATA","SET_CITY_NAME","SET_CITY_DATA","UPDATE_CITY_DATA","DELETE_CITY","initialState","fetching","id","citySelected","cityGroup","lat","lon","name","temp","feels_like","humidity","temp_max","temp_min","doubleNameReject","array","i","length","setCityNameAC","type","getWeatherThunkCreator","dispatch","getState","a","newItem","coord","main","console","error","weatherReducer","state","action","index","findIndex","toLowerCase","Object","assign","slice","concat","indexEl","useStyles","makeStyles","buttonUpdate","backgroundColor","buttonDelete","card","height","display","flexDirection","cardContent","flexGrow","Cards","update","deleted","classes","useEffect","history","useHistory","Card","className","onClick","e","push","CardContent","Typography","gutterBottom","variant","component","Button","stopPropagation","size","mapDispatchToProps","updateWeatherThunkCreator","deleteCityAC","theme","cardGrid","paddingTop","spacing","paddingBottom","inputGrid","buttonSetCIty","color","marginLeft","input","borderRight","connect","map","Container","maxWidth","Grid","container","city","item","xs","sm","md","Input","value","onChange","target","placeholder","compose","withRouter","props","match","params","CityName","currentData","event","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","persistedState","serializedState","localStorage","getItem","JSON","parse","loadState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","applyMiddleware","thunkMiddleware","subscribe","stringify","setItem","saveState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.031b708b.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { weatherAPIKey } from \"../key/key\";\r\nconst weatherOpen = axios.create({\r\n  baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n});\r\n\r\nconst weatherAPI = {\r\n  getCity(cityName: string) {\r\n    return weatherOpen\r\n      .get(`weather?q=${cityName}&appid=${weatherAPIKey}&units=metric`)\r\n      .then((response) => response.data);\r\n  },\r\n};\r\n\r\nexport { weatherAPI };\r\n","const weatherAPIKey = \"968cb1decfce0d451e6ef8dfe6e0713c\";\r\n\r\nexport { weatherAPIKey };\r\n","export const SET_WEATHER_DATA = ` SET-WEATHER-DATA`;\r\nexport const SET_CITY_NAME = \"SET-CITY-NAME\";\r\nexport const SET_CITY_DATA = \"SET-CITY-DATA\";\r\nexport const UPDATE_CITY_DATA = \"UPDATE-CITY_DATA\";\r\nexport const DELETE_CITY = \"DELETE_CITY\";\r\n\r\nexport type CityDataType = {\r\n  id: number;\r\n  lat: number;\r\n  lon: number;\r\n  name: string;\r\n  temp: number;\r\n  feels_like: number;\r\n  humidity: number;\r\n  temp_max: number;\r\n  temp_min: number;\r\n};\r\n\r\nexport type InitialStateType = {\r\n  id: number | null;\r\n  fetching: boolean;\r\n  citySelected: string;\r\n  cityGroup: Array<CityDataType>;\r\n};\r\n\r\nexport const initialState: InitialStateType = {\r\n  fetching: false,\r\n  id: null,\r\n  citySelected: \"\",\r\n  cityGroup: [\r\n    {\r\n      id: 703448,\r\n      lat: 50.4333,\r\n      lon: 30.5167,\r\n      name: \"Kyiv\",\r\n      temp: 19.55,\r\n      feels_like: 19,\r\n      humidity: 60,\r\n      temp_max: 20,\r\n      temp_min: 15,\r\n    },\r\n  ],\r\n};\r\n\r\nexport type SetWeatherDataType = {\r\n  type: typeof SET_WEATHER_DATA;\r\n  data: number;\r\n};\r\n\r\nexport type SetCityNameType = {\r\n  type: typeof SET_CITY_NAME;\r\n  data: string;\r\n};\r\n\r\nexport type SetCityDataType = {\r\n  type: typeof SET_CITY_DATA;\r\n  newItem: CityDataType;\r\n};\r\n\r\nexport type UpdateCityDataType = {\r\n  type: typeof UPDATE_CITY_DATA;\r\n  newItem: CityDataType;\r\n};\r\n\r\nexport type DeleteCityType = {\r\n  type: typeof DELETE_CITY;\r\n  name: string;\r\n};\r\n\r\nexport type ActionTypes =\r\n  | SetWeatherDataType\r\n  | SetCityDataType\r\n  | SetCityNameType\r\n  | UpdateCityDataType\r\n  | DeleteCityType;\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { weatherAPI } from \"../api/openweather\";\r\nimport { AppStateType } from \"./store\";\r\nimport {\r\n  SET_WEATHER_DATA,\r\n  SET_CITY_NAME,\r\n  SET_CITY_DATA,\r\n  UPDATE_CITY_DATA,\r\n  DELETE_CITY,\r\n  CityDataType,\r\n  InitialStateType,\r\n  initialState,\r\n  SetCityNameType,\r\n  SetWeatherDataType,\r\n  SetCityDataType,\r\n  UpdateCityDataType,\r\n  DeleteCityType,\r\n  ActionTypes,\r\n} from \"./weatherReducerVariable\";\r\n\r\nconst doubleNameReject = (id: number, array: Array<CityDataType>) => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (array[i].id === id) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const weatherReducer = (\r\n  state = initialState,\r\n  action: ActionTypes\r\n): InitialStateType => {\r\n  switch (action.type) {\r\n    case SET_WEATHER_DATA:\r\n      return { ...state, id: action.data };\r\n    case SET_CITY_NAME:\r\n      return { ...state, citySelected: action.data };\r\n    case SET_CITY_DATA:\r\n      if (doubleNameReject(action.newItem.id, state.cityGroup)) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        cityGroup: [...state.cityGroup, action.newItem],\r\n      };\r\n    case UPDATE_CITY_DATA:\r\n      let index = state.cityGroup.findIndex(\r\n        (i) => i.name.toLowerCase() === action.newItem.name.toLowerCase()\r\n      );\r\n      return Object.assign({}, state, {\r\n        cityGroup: state.cityGroup\r\n          .slice(0, index)\r\n          .concat([action.newItem])\r\n          .concat(state.cityGroup.slice(index + 1)),\r\n      });\r\n    case DELETE_CITY:\r\n      let indexEl = state.cityGroup.findIndex(\r\n        (i) => i.name.toLowerCase() === action.name.toLowerCase()\r\n      );\r\n      return {\r\n        ...state,\r\n        cityGroup: [\r\n          ...state.cityGroup.slice(0, indexEl),\r\n          ...state.cityGroup.slice(indexEl + 1),\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const setWeatherDataAC = (id: number): SetWeatherDataType => ({\r\n  type: SET_WEATHER_DATA,\r\n  data: id,\r\n});\r\n\r\nexport const setCityNameAC = (name: string): SetCityNameType => ({\r\n  type: SET_CITY_NAME,\r\n  data: name,\r\n});\r\n\r\nexport const setCityDataAC = (newItem: CityDataType): SetCityDataType => ({\r\n  type: SET_CITY_DATA,\r\n  newItem: newItem,\r\n});\r\n\r\nexport const updateCityDataAC = (\r\n  newItem: CityDataType\r\n): UpdateCityDataType => ({\r\n  type: UPDATE_CITY_DATA,\r\n  newItem: newItem,\r\n});\r\n\r\nexport const deleteCityAC = (name: string): DeleteCityType => ({\r\n  type: DELETE_CITY,\r\n  name: name,\r\n});\r\n\r\nexport const getWeatherThunkCreator = (\r\n  name: string\r\n): ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes> => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let data = await weatherAPI.getCity(name);\r\n      dispatch(\r\n        setCityDataAC({\r\n          id: data.id,\r\n          lon: data.coord.lon,\r\n          lat: data.coord.lat,\r\n          name: data.name,\r\n          temp: data.main.temp,\r\n          feels_like: data.main.feels_like,\r\n          humidity: data.main.humidity,\r\n          temp_max: data.main.temp_max,\r\n          temp_min: data.main.temp_min,\r\n        })\r\n      );\r\n    } catch {\r\n      console.error(`Oops`);\r\n    }\r\n  };\r\n};\r\n\r\nexport const updateWeatherThunkCreator = (\r\n  name: string\r\n): ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes> => {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      let data = await weatherAPI.getCity(name);\r\n      dispatch(\r\n        updateCityDataAC({\r\n          id: data.id,\r\n          lon: data.coord.lon,\r\n          lat: data.coord.lat,\r\n          name: data.name,\r\n          temp: data.main.temp,\r\n          feels_like: data.main.feels_like,\r\n          humidity: data.main.humidity,\r\n          temp_max: data.main.temp_max,\r\n          temp_min: data.main.temp_min,\r\n        })\r\n      );\r\n    } catch {\r\n      console.error(`Oops`);\r\n    }\r\n  };\r\n};\r\n\r\nexport default weatherReducer;\r\n","import { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\ntype Props = {\r\n  name: string;\r\n  temp: number;\r\n  update: (name: string) => void;\r\n  deleted: (name: string) => void;\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  buttonUpdate: {\r\n    backgroundColor: \"orange\",\r\n  },\r\n  buttonDelete: {\r\n    backgroundColor: \"red\",\r\n  },\r\n  card: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  cardContent: {\r\n    flexGrow: 1,\r\n  },\r\n});\r\n\r\nconst Cards: React.FC<Props> = ({ name, temp, update, deleted }) => {\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    // getWeatherThunkCreator(\"moscow\");\r\n  });\r\n  let history = useHistory();\r\n  return (\r\n    <Card\r\n      className={classes.card}\r\n      onClick={(e) => {\r\n        history.push(`/city/${name}`);\r\n      }}\r\n    >\r\n      <CardContent className={classes.cardContent}>\r\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n          City name: <span className=\"cardData\"> {name}</span>\r\n        </Typography>\r\n        <Typography>\r\n          Temperature value: <span className=\"cardData\"> {temp}</span>\r\n        </Typography>\r\n        <div className=\"button__wrapper\">\r\n          <Button\r\n            className={classes.buttonUpdate}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              update(name);\r\n            }}\r\n            size=\"small\"\r\n          >\r\n            Update\r\n          </Button>\r\n          <Button\r\n            className={classes.buttonDelete}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              deleted(name);\r\n            }}\r\n            size=\"small\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppStateType } from \"../../redux/store\";\r\nimport {\r\n  getWeatherThunkCreator,\r\n  updateWeatherThunkCreator,\r\n  setCityNameAC,\r\n  deleteCityAC,\r\n} from \"../../redux/weatherReducer\";\r\n\r\nimport Cards from \"./card/card\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Input } from \"@material-ui/core\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { CityDataType } from \"redux/weatherReducerVariable\";\r\n\r\nconst mapDispatchToProps = {\r\n  getWeatherThunkCreator,\r\n  updateWeatherThunkCreator,\r\n  setCityNameAC,\r\n  deleteCityAC,\r\n};\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    id: state.weatherReducer.id,\r\n    name: state.weatherReducer.citySelected,\r\n    cityGroup: state.weatherReducer.cityGroup,\r\n  };\r\n};\r\ntype MapStateToProps = {\r\n  name: string;\r\n  cityGroup: any;\r\n};\r\ntype DispatchStateToProps = {\r\n  getWeatherThunkCreator: (name: string) => void;\r\n  updateWeatherThunkCreator: (name: string) => void;\r\n  setCityNameAC: (name: string) => void;\r\n  deleteCityAC: (name: string) => void;\r\n};\r\n\r\ntype PropsType = MapStateToProps & DispatchStateToProps;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n  inputGrid: {\r\n    paddingTop: theme.spacing(0),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n\r\n  buttonSetCIty: {\r\n    backgroundColor: \"green\",\r\n    color: \"white\",\r\n    marginLeft: \"10px\",\r\n  },\r\n  input: {\r\n    backgroundColor: \"white\",\r\n    borderRight: \"3px\",\r\n    color: \"black\",\r\n  },\r\n}));\r\n\r\nconst GeneralPage: React.FC<PropsType> = ({\r\n  name,\r\n  cityGroup,\r\n  getWeatherThunkCreator,\r\n  updateWeatherThunkCreator,\r\n  setCityNameAC,\r\n  deleteCityAC,\r\n}) => {\r\n  useEffect(() => {\r\n    cityGroup.map((e: CityDataType) => {\r\n      updateWeatherThunkCreator(e.name);\r\n    });\r\n  }, []);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <main>\r\n      <Container className={classes.cardGrid} maxWidth=\"md\">\r\n        <Grid container spacing={4}>\r\n          {cityGroup ? (\r\n            cityGroup.map((city: CityDataType, index: number) => (\r\n              <Grid item key={name + index} xs={12} sm={6} md={4}>\r\n                <Cards\r\n                  key={name + index}\r\n                  name={city.name}\r\n                  temp={city.temp}\r\n                  update={updateWeatherThunkCreator}\r\n                  deleted={deleteCityAC}\r\n                />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </Grid>\r\n      </Container>\r\n      <Container className={classes.inputGrid} maxWidth=\"md\">\r\n        <div>\r\n          <Input\r\n            className={classes.input}\r\n            value={name}\r\n            onChange={(e) => setCityNameAC(e.target.value)}\r\n            placeholder=\"set city name\"\r\n          />\r\n          <Button\r\n            className={classes.buttonSetCIty}\r\n            onClick={() => {\r\n              getWeatherThunkCreator(name);\r\n            }}\r\n            size=\"small\"\r\n          >\r\n            Add\r\n          </Button>\r\n        </div>\r\n      </Container>\r\n    </main>\r\n  );\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralPage);\r\n","import { ComponentType, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter, RouteComponentProps } from \"react-router\";\r\nimport { compose } from \"redux\";\r\nimport { CityDataType } from \"redux/weatherReducerVariable\";\r\nimport { AppStateType } from \"../../redux/store\";\r\nimport {\r\n  getWeatherThunkCreator,\r\n  setCityNameAC,\r\n} from \"../../redux/weatherReducer\";\r\n\r\nconst mapDispatchToProps = {\r\n  getWeatherThunkCreator,\r\n  setCityNameAC,\r\n};\r\nconst mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    cityGroup: state.weatherReducer.cityGroup,\r\n  };\r\n};\r\ntype MapStateToProps = {\r\n  name: string;\r\n  cityGroup: any;\r\n};\r\ntype DispatchStateToProps = {\r\n  getWeatherThunkCreator: (name: string) => void;\r\n  setCityNameAC: (name: string) => void;\r\n};\r\ntype TParams = { CityName: string };\r\n\r\ntype PropsType = MapStateToProps &\r\n  DispatchStateToProps &\r\n  RouteComponentProps<TParams>;\r\n\r\nconst Detail: React.FC<PropsType> = (props) => {\r\n  let cityName = props.match.params.CityName;\r\n  let currentData: CityDataType = {\r\n    id: 0,\r\n    lat: 0,\r\n    lon: 0,\r\n    name: \"\",\r\n    temp: 0,\r\n    feels_like: 0,\r\n    humidity: 0,\r\n    temp_max: 0,\r\n    temp_min: 0,\r\n  };\r\n  props.cityGroup.map((event: any) => {\r\n    if (event.name === cityName) {\r\n      currentData = event;\r\n    }\r\n  });\r\n  // useEffect(() => {\r\n  //   fetch(\r\n  //     `https://api.openweathermap.org/data/2.5/onecall?lat=${currentData.lat}&lon=${currentData.lon}&units=metric&exclude=hourly&appid=968cb1decfce0d451e6ef8dfe6e0713c`\r\n  //   ).then((e) => {\r\n  //     console.log(e);\r\n  //   });\r\n  // });\r\n  return (\r\n    <div className=\"details__wrapper\">\r\n      <div>\r\n        <span className=\"details__name\"> City Name</span>\r\n        <span className=\"details__data\">{cityName}</span>{\" \"}\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\"> Current temperature</span>\r\n\r\n        <span className=\"details__data\">{currentData.temp}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\">Feels like temperature</span>\r\n        <span className=\"details__data\">{currentData.feels_like}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\">humidity</span>\r\n        <span className=\"details__data\">{currentData.humidity}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\"> temp_max</span>\r\n        <span className=\"details__data\">{currentData.temp_max}</span>\r\n      </div>\r\n      <div>\r\n        <span className=\"details__name\"> temp_min</span>\r\n        <span className=\"details__data\">{currentData.temp_min}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withRouter\r\n)(Detail);\r\n","import { Route, Switch } from \"react-router-dom\";\r\nimport GeneralPage from \"./component/general/GeneralPage\";\r\nimport Detail from \"./component/detail/detail\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <GeneralPage />\r\n        </Route>\r\n        <Route path=\"/City/:CityName?\">\r\n          <Detail />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers, createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport weatherReducer from \"./weatherReducer\";\r\n\r\nimport { saveState, loadState } from \"../localstorage/localStorage\";\r\nlet reducers = combineReducers({\r\n  weatherReducer: weatherReducer,\r\n});\r\nconst persistedState = loadState();\r\n\r\ntype ReducersType = typeof reducers;\r\nexport type AppStateType = ReturnType<ReducersType>;\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  persistedState,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState());\r\n});\r\n//@ts-ignore\r\nwindow.store = store;\r\nexport default store;\r\n","import { AppStateType } from \"../redux/store\";\r\n\r\nexport const saveState = (state: AppStateType) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch {\r\n    // We'll just ignore write errors\r\n  }\r\n};\r\nexport const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\r\n\r\nimport store from \"./redux/store\";\r\n\r\n// console.log(store.getState());\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </HashRouter>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}